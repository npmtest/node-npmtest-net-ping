{"/home/travis/build/npmtest/node-npmtest-net-ping/test.js":"/* istanbul instrument in package npmtest_net_ping */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-net-ping/lib.npmtest_net_ping.js":"/* istanbul instrument in package npmtest_net_ping */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_net_ping = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_net_ping = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-net-ping/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-net-ping && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_net_ping */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_net_ping\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_net_ping.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_net_ping.rollup.js'] =\n            local.assetsDict['/assets.npmtest_net_ping.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_net_ping.__dirname + '/lib.npmtest_net_ping.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-net-ping/node_modules/net-ping/index.js":"\r\nvar events = require (\"events\");\r\nvar net = require (\"net\");\r\nvar raw = require (\"raw-socket\");\r\nvar util = require (\"util\");\r\n\r\nfunction _expandConstantObject (object) {\r\n\tvar keys = [];\r\n\tfor (var key in object)\r\n\t\tkeys.push (key);\r\n\tfor (var i = 0; i < keys.length; i++)\r\n\t\tobject[object[keys[i]]] = parseInt (keys[i]);\r\n}\r\n\r\nvar NetworkProtocol = {\r\n\t1: \"IPv4\",\r\n\t2: \"IPv6\"\r\n};\r\n\r\n_expandConstantObject (NetworkProtocol);\r\n\r\nfunction DestinationUnreachableError (source) {\r\n\tthis.name = \"DestinationUnreachableError\";\r\n\tthis.message = \"Destination unreachable (source=\" + source + \")\";\r\n\tthis.source = source;\r\n}\r\nutil.inherits (DestinationUnreachableError, Error);\r\n\r\nfunction PacketTooBigError (source) {\r\n\tthis.name = \"PacketTooBigError\";\r\n\tthis.message = \"Packet too big (source=\" + source + \")\";\r\n\tthis.source = source;\r\n}\r\nutil.inherits (PacketTooBigError, Error);\r\n\r\nfunction ParameterProblemError (source) {\r\n\tthis.name = \"ParameterProblemError\";\r\n\tthis.message = \"Parameter problem (source=\" + source + \")\";\r\n\tthis.source = source;\r\n}\r\nutil.inherits (ParameterProblemError, Error);\r\n\r\nfunction RedirectReceivedError (source) {\r\n\tthis.name = \"RedirectReceivedError\";\r\n\tthis.message = \"Redirect received (source=\" + source + \")\";\r\n\tthis.source = source;\r\n}\r\nutil.inherits (RedirectReceivedError, Error);\r\n\r\nfunction RequestTimedOutError () {\r\n\tthis.name = \"RequestTimedOutError\";\r\n\tthis.message = \"Request timed out\";\r\n}\r\nutil.inherits (RequestTimedOutError, Error);\r\n\r\nfunction SourceQuenchError (source) {\r\n\tthis.name = \"SourceQuenchError\";\r\n\tthis.message = \"Source quench (source=\" + source + \")\";\r\n\tthis.source = source;\r\n}\r\nutil.inherits (SourceQuenchError, Error);\r\n\r\nfunction TimeExceededError (source) {\r\n\tthis.name = \"TimeExceededError\";\r\n\tthis.message = \"Time exceeded (source=\" + source + \")\";\r\n\tthis.source = source;\r\n}\r\nutil.inherits (TimeExceededError, Error);\r\n\r\nfunction Session (options) {\r\n\tthis.retries = (options && options.retries != undefined) ? options.retries : 1;\r\n\tthis.timeout = (options && options.timeout) ? options.timeout : 2000;\r\n\r\n\tthis.packetSize = (options && options.packetSize) ? options.packetSize : 16;\r\n\r\n\tif (this.packetSize < 12)\r\n\t\tthis.packetSize = 12;\r\n\r\n\tthis.addressFamily = (options && options.networkProtocol\r\n\t\t\t\t&& options.networkProtocol == NetworkProtocol.IPv6)\r\n\t\t\t? raw.AddressFamily.IPv6\r\n\t\t\t: raw.AddressFamily.IPv4;\r\n\r\n\tthis._debug = (options && options._debug) ? true : false;\r\n\t\r\n\tthis.defaultTTL = (options && options.ttl) ? options.ttl : 128;\r\n\t\r\n\tthis.sessionId = (options && options.sessionId)\r\n\t\t\t? options.sessionId\r\n\t\t\t: process.pid;\r\n\t\r\n\tthis.sessionId = this.sessionId % 65535;\r\n\t\r\n\tthis.nextId = 1;\r\n\r\n\tthis.socket = null;\r\n\r\n\tthis.reqs = {};\r\n\tthis.reqsPending = 0;\r\n\r\n\tthis.getSocket ();\r\n};\r\n\r\nutil.inherits (Session, events.EventEmitter);\r\n\r\nSession.prototype.close = function () {\r\n\tif (this.socket)\r\n\t\tthis.socket.close ();\r\n\tthis.flush (new Error (\"Socket forcibly closed\"));\r\n\tdelete this.socket;\r\n\treturn this;\r\n};\r\n\r\nSession.prototype._debugRequest = function (target, req) {\r\n\tconsole.log (\"request: addressFamily=\" + this.addressFamily + \" target=\"\r\n\t\t\t+ req.target + \" id=\" + req.id + \" buffer=\"\r\n\t\t\t+ req.buffer.toString (\"hex\"));\r\n}\r\n\r\nSession.prototype._debugResponse = function (source, buffer) {\r\n\tconsole.log (\"response: addressFamily=\" + this.addressFamily + \" source=\"\r\n\t\t\t+ source + \" buffer=\" + buffer.toString (\"hex\"));\r\n}\r\n\r\nSession.prototype.flush = function (error) {\r\n\tfor (id in this.reqs) {\r\n\t\tvar req = this.reqRemove (id);\r\n\t\tvar sent = req.sent ? req.sent : new Date ();\r\n\t\treq.callback (error, req.target, sent, new Date ());\r\n\t}\r\n};\r\n\r\nSession.prototype.getSocket = function () {\r\n\tif (this.socket)\r\n\t\treturn this.socket;\r\n\r\n\tvar protocol = this.addressFamily == raw.AddressFamily.IPv6\r\n\t\t\t? raw.Protocol.ICMPv6\r\n\t\t\t: raw.Protocol.ICMP;\r\n\r\n\tvar me = this;\r\n\tvar options = {\r\n\t\taddressFamily: this.addressFamily,\r\n\t\tprotocol: protocol\r\n\t};\r\n\r\n\tthis.socket = raw.createSocket (options);\r\n\tthis.socket.on (\"error\", this.onSocketError.bind (me));\r\n\tthis.socket.on (\"close\", this.onSocketClose.bind (me));\r\n\tthis.socket.on (\"message\", this.onSocketMessage.bind (me));\r\n\t\r\n\tthis.ttl = null;\r\n\tthis.setTTL (this.defaultTTL);\r\n\t\r\n\treturn this.socket;\r\n};\r\n\r\nSession.prototype.fromBuffer = function (buffer) {\r\n\tvar offset, type, code;\r\n\r\n\tif (this.addressFamily == raw.AddressFamily.IPv6) {\r\n\t\t// IPv6 raw sockets don't pass the IPv6 header back to us\r\n\t\toffset = 0;\r\n\r\n\t\tif (buffer.length - offset < 8)\r\n\t\t\treturn;\r\n\t\t\r\n\t\t// We don't believe any IPv6 options will be passed back to us so we\r\n\t\t// don't attempt to pass them here.\r\n\r\n\t\ttype = buffer.readUInt8 (offset);\r\n\t\tcode = buffer.readUInt8 (offset + 1);\r\n\t} else {\r\n\t\t// Need at least 20 bytes for an IP header, and it should be IPv4\r\n\t\tif (buffer.length < 20 || (buffer[0] & 0xf0) != 0x40)\r\n\t\t\treturn;\r\n\r\n\t\t// The length of the IPv4 header is in mulitples of double words\r\n\t\tvar ip_length = (buffer[0] & 0x0f) * 4;\r\n\r\n\t\t// ICMP header is 8 bytes, we don't care about the data for now\r\n\t\tif (buffer.length - ip_length < 8)\r\n\t\t\treturn;\r\n\r\n\t\tvar ip_icmp_offset = ip_length;\r\n\r\n\t\t// ICMP message too short\r\n\t\tif (buffer.length - ip_icmp_offset < 8)\r\n\t\t\treturn;\r\n\r\n\t\ttype = buffer.readUInt8 (ip_icmp_offset);\r\n\t\tcode = buffer.readUInt8 (ip_icmp_offset + 1);\r\n\r\n\t\t// For error type responses the sequence and identifier cannot be\r\n\t\t// extracted in the same way as echo responses, the data part contains\r\n\t\t// the IP header from our request, followed with at least 8 bytes from\r\n\t\t// the echo request that generated the error, so we first go to the IP\r\n\t\t// header, then skip that to get to the ICMP packet which contains the\r\n\t\t// sequence and identifier.\r\n\t\tif (type == 3 || type == 4 || type == 5 || type == 11) {\r\n\t\t\tvar ip_icmp_ip_offset = ip_icmp_offset + 8;\r\n\r\n\t\t\t// Need at least 20 bytes for an IP header, and it should be IPv4\r\n\t\t\tif (buffer.length - ip_icmp_ip_offset  < 20\r\n\t\t\t\t\t|| (buffer[ip_icmp_ip_offset] & 0xf0) != 0x40)\r\n\t\t\t\treturn;\r\n\r\n\t\t\t// The length of the IPv4 header is in mulitples of double words\r\n\t\t\tvar ip_icmp_ip_length = (buffer[ip_icmp_ip_offset] & 0x0f) * 4;\r\n\r\n\t\t\t// ICMP message too short\r\n\t\t\tif (buffer.length - ip_icmp_ip_offset - ip_icmp_ip_length < 8)\r\n\t\t\t\treturn;\r\n\r\n\t\t\toffset = ip_icmp_ip_offset + ip_icmp_ip_length;\r\n\t\t} else {\r\n\t\t\toffset = ip_icmp_offset\r\n\t\t}\r\n\t}\r\n\r\n\t// Response is not for a request we generated\r\n\tif (buffer.readUInt16BE (offset + 4) != this.sessionId)\r\n\t\treturn;\r\n\r\n\tbuffer[offset + 4] = 0;\r\n\t\r\n\tvar id = buffer.readUInt16BE (offset + 6);\r\n\tvar req = this.reqs[id];\r\n\r\n\tif (req) {\r\n\t\treq.type = type;\r\n\t\treq.code = code;\r\n\t\treturn req;\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nSession.prototype.onBeforeSocketSend = function (req) {\r\n\tthis.setTTL (req.ttl ? req.ttl : this.defaultTTL);\r\n}\r\n\r\nSession.prototype.onSocketClose = function () {\r\n\tthis.emit (\"close\");\r\n\tthis.flush (new Error (\"Socket closed\"));\r\n};\r\n\r\nSession.prototype.onSocketError = function (error) {\r\n\tthis.emit (\"error\", error);\r\n};\r\n\r\nSession.prototype.onSocketMessage = function (buffer, source) {\r\n\tif (this._debug)\r\n\t\tthis._debugResponse (source, buffer);\r\n\r\n\tvar req = this.fromBuffer (buffer);\r\n\tif (req) {\r\n\t\t/**\r\n\t\t ** If we ping'd ourself (i.e. 127.0.0.1 or ::1) then it is likely we\r\n\t\t ** will receive the echo request in addition to any corresponding echo\r\n\t\t ** responses.  We discard the request packets here so that we don't\r\n\t\t ** delete the request from the from the request queue since we haven't\r\n\t\t ** actually received a response yet.\r\n\t\t **/\r\n\t\tif (this.addressFamily == raw.AddressFamily.IPv6) {\r\n\t\t\tif (req.type == 128)\r\n\t\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tif (req.type == 8)\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.reqRemove (req.id);\r\n\t\t\r\n\t\tif (this.addressFamily == raw.AddressFamily.IPv6) {\r\n\t\t\tif (req.type == 1) {\r\n\t\t\t\treq.callback (new DestinationUnreachableError (source), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else if (req.type == 2) {\r\n\t\t\t\treq.callback (new PacketTooBigError (source), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else if (req.type == 3) {\r\n\t\t\t\treq.callback (new TimeExceededError (source), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else if (req.type == 4) {\r\n\t\t\t\treq.callback (new ParameterProblemError (source), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else if (req.type == 129) {\r\n\t\t\t\treq.callback (null, req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else {\r\n\t\t\t\treq.callback (new Error (\"Unknown response type '\" + req.type\r\n\t\t\t\t\t\t+ \"' (source=\" + source + \")\"), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (req.type == 0) {\r\n\t\t\t\treq.callback (null, req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else if (req.type == 3) {\r\n\t\t\t\treq.callback (new DestinationUnreachableError (source), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else if (req.type == 4) {\r\n\t\t\t\treq.callback (new SourceQuenchError (source), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else if (req.type == 5) {\r\n\t\t\t\treq.callback (new RedirectReceivedError (source), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else if (req.type == 11) {\r\n\t\t\t\treq.callback (new TimeExceededError (source), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t} else {\r\n\t\t\t\treq.callback (new Error (\"Unknown response type '\" + req.type\r\n\t\t\t\t\t\t+ \"' (source=\" + source + \")\"), req.target,\r\n\t\t\t\t\t\treq.sent, new Date ());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSession.prototype.onSocketSend = function (req, error, bytes) {\r\n\tif (! req.sent)\r\n\t\treq.sent = new Date ();\r\n\tif (error) {\r\n\t\tthis.reqRemove (req.id);\r\n\t\treq.callback (error, req.target, req.sent, req.sent);\r\n\t} else {\r\n\t\tvar me = this;\r\n\t\treq.timer = setTimeout (this.onTimeout.bind (me, req), req.timeout);\r\n\t}\r\n};\r\n\r\nSession.prototype.onTimeout = function (req) {\r\n\tif (req.retries > 0) {\r\n\t\treq.retries--;\r\n\t\tthis.send (req);\r\n\t} else {\r\n\t\tthis.reqRemove (req.id);\r\n\t\treq.callback (new RequestTimedOutError (\"Request timed out\"),\r\n\t\t\t\treq.target, req.sent, new Date ());\r\n\t}\r\n};\r\n\r\n// Keep searching for an ID which is not in use\r\nSession.prototype._generateId = function () {\r\n\tvar startId = this.nextId++;\r\n\twhile (1) {\r\n\t\tif (this.nextId > 65535)\r\n\t\t\tthis.nextId = 1;\r\n\t\tif (this.reqs[this.nextId]) {\r\n\t\t\tthis.nextId++;\r\n\t\t} else {\r\n\t\t\treturn this.nextId;\r\n\t\t}\r\n\t\t// No free request IDs\r\n\t\tif (this.nextId == startId)\r\n\t\t\treturn;\r\n\t}\r\n}\r\n\r\nSession.prototype.pingHost = function (target, callback) {\r\n\tvar id = this._generateId ();\r\n\tif (! id) {\r\n\t\tcallback (new Error (\"Too many requests outstanding\"), target);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tvar req = {\r\n\t\tid: id,\r\n\t\tretries: this.retries,\r\n\t\ttimeout: this.timeout,\r\n\t\tcallback: callback,\r\n\t\ttarget: target\r\n\t};\r\n\r\n\tthis.reqQueue (req);\r\n\r\n\treturn this;\r\n};\r\n\r\nSession.prototype.reqQueue = function (req) {\r\n\treq.buffer = this.toBuffer (req);\r\n\r\n\tif (this._debug)\r\n\t\tthis._debugRequest (req.target, req);\r\n\r\n\tthis.reqs[req.id] = req;\r\n\tthis.reqsPending++;\r\n\tthis.send (req);\r\n\t\r\n\treturn this;\r\n}\r\n\r\nSession.prototype.reqRemove = function (id) {\r\n\tvar req = this.reqs[id];\r\n\tif (req) {\r\n\t\tclearTimeout (req.timer);\r\n\t\tdelete req.timer;\r\n\t\tdelete this.reqs[req.id];\r\n\t\tthis.reqsPending--;\r\n\t}\r\n\t// If we have no more outstanding requests pause readable events\r\n\tif (this.reqsPending <= 0)\r\n\t\tif (! this.getSocket ().recvPaused)\r\n\t\t\tthis.getSocket ().pauseRecv ();\r\n\treturn req;\r\n};\r\n\r\nSession.prototype.send = function (req) {\r\n\tvar buffer = req.buffer;\r\n\tvar me = this;\r\n\t// Resume readable events if the raw socket is paused\r\n\tif (this.getSocket ().recvPaused)\r\n\t\tthis.getSocket ().resumeRecv ();\r\n\tthis.getSocket ().send (buffer, 0, buffer.length, req.target,\r\n\t\t\tthis.onBeforeSocketSend.bind (me, req),\r\n\t\t\tthis.onSocketSend.bind (me, req));\r\n};\r\n\r\nSession.prototype.setTTL = function (ttl) {\r\n\tif (this.ttl && this.ttl == ttl)\r\n\t\treturn;\r\n\r\n\tvar level = this.addressFamily == raw.AddressFamily.IPv6\r\n\t\t\t? raw.SocketLevel.IPPROTO_IPV6\r\n\t\t\t: raw.SocketLevel.IPPROTO_IP;\r\n\tthis.getSocket ().setOption (level, raw.SocketOption.IP_TTL, ttl);\r\n\tthis.ttl = ttl;\r\n}\r\n\r\nSession.prototype.toBuffer = function (req) {\r\n\tvar buffer = new Buffer (this.packetSize);\r\n\r\n\t// Since our buffer represents real memory we should initialise it to\r\n\t// prevent its previous contents from leaking to the network.\r\n\tfor (var i = 8; i < this.packetSize; i++)\r\n\t\tbuffer[i] = 0;\r\n\r\n\tvar type = this.addressFamily == raw.AddressFamily.IPv6 ? 128 : 8;\r\n\r\n\tbuffer.writeUInt8 (type, 0);\r\n\tbuffer.writeUInt8 (0, 1);\r\n\tbuffer.writeUInt16BE (0, 2);\r\n\tbuffer.writeUInt16BE (this.sessionId, 4);\r\n\tbuffer.writeUInt16BE (req.id, 6);\r\n\r\n\traw.writeChecksum (buffer, 2, raw.createChecksum (buffer));\r\n\r\n\treturn buffer;\r\n};\r\n\r\nSession.prototype.traceRouteCallback = function (trace, req, error, target,\r\n\t\tsent, rcvd) {\r\n\tif (trace.feedCallback (error, target, req.ttl, sent, rcvd)) {\r\n\t\ttrace.doneCallback (new Error (\"Trace forcibly stopped\"), target);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (error) {\r\n\t\tif (req.ttl >= trace.ttl) {\r\n\t\t\ttrace.doneCallback (error, target);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ((error instanceof RequestTimedOutError) && ++trace.timeouts >= trace.maxHopTimeouts) {\r\n\t\t\ttrace.doneCallback (new Error (\"Too many timeouts\"), target);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar id = this._generateId ();\r\n\t\tif (! id) {\r\n\t\t\ttrace.doneCallback (new Error (\"Too many requests outstanding\"),\r\n\t\t\t\t\ttarget);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\treq.ttl++;\r\n\t\treq.id = id;\r\n\t\tvar me = this;\r\n\t\treq.retries = this.retries;\r\n\t\treq.sent = null;\r\n\t\tthis.reqQueue (req);\r\n\t} else {\r\n\t\ttrace.doneCallback (null, target);\r\n\t}\r\n}\r\n\r\nSession.prototype.traceRoute = function (target, ttlOrOptions, feedCallback,\r\n\t\tdoneCallback) {\r\n\t// signature was (target, feedCallback, doneCallback)\r\n\tif (! doneCallback) {\r\n\t\tdoneCallback = feedCallback;\r\n\t\tfeedCallback = ttlOrOptions;\r\n\t\tttlOrOptions = {ttl: this.ttl};\r\n\t}\r\n\r\n\tvar maxHopTimeouts = 3;\r\n\tvar startTtl = 1;\r\n\tvar ttl = this.ttl;\r\n\r\n\tif (typeof ttlOrOptions == \"object\") {\r\n\t\tif (ttlOrOptions.ttl)\r\n\t\t\tttl = ttlOrOptions.ttl;\r\n\t\tif (ttlOrOptions.maxHopTimeouts)\r\n\t\t\tmaxHopTimeouts = ttlOrOptions.maxHopTimeouts;\r\n\t\tif (ttlOrOptions.startTtl)\r\n\t\t\tstartTtl = ttlOrOptions.startTtl;\r\n\t} else {\r\n\t\tttl = ttlOrOptions;\r\n\t}\r\n\r\n\tvar id = this._generateId ();\r\n\tif (! id) {\r\n\t\tvar sent = new Date ();\r\n\t\tdoneCallback (new Error (\"Too many requests outstanding\"), target,\r\n\t\t\t\tsent, sent);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tvar trace = {\r\n\t\tfeedCallback: feedCallback,\r\n\t\tdoneCallback: doneCallback,\r\n\t\tttl: ttl,\r\n\t\tmaxHopTimeouts: maxHopTimeouts,\r\n\t\ttimeouts: 0\r\n\t};\r\n\t\r\n\tvar me = this;\r\n\r\n\tvar req = {\r\n\t\tid: id,\r\n\t\tretries: this.retries,\r\n\t\ttimeout: this.timeout,\r\n\t\tttl: startTtl,\r\n\t\ttarget: target\r\n\t};\r\n\treq.callback = me.traceRouteCallback.bind (me, trace, req);\r\n\t\r\n\tthis.reqQueue (req);\r\n\r\n\treturn this;\r\n};\r\n\r\nexports.createSession = function (options) {\r\n\treturn new Session (options || {});\r\n};\r\n\r\nexports.NetworkProtocol = NetworkProtocol;\r\n\r\nexports.Session = Session;\r\n\r\nexports.DestinationUnreachableError = DestinationUnreachableError;\r\nexports.PacketTooBigError = PacketTooBigError;\r\nexports.ParameterProblemError = ParameterProblemError;\r\nexports.RedirectReceivedError = RedirectReceivedError;\r\nexports.RequestTimedOutError = RequestTimedOutError;\r\nexports.SourceQuenchError = SourceQuenchError;\r\nexports.TimeExceededError = TimeExceededError;\r\n"}